{"ast":null,"code":"import produce from 'immer';\nimport { DEFAULT_ACTION, GET_ALL_POST, GET_ALL_POST_SUCCESS, GET_ALL_POST_FAIELD } from './constants';\nexport var initialState = {\n  start: false,\n  posts: []\n};\nexport var IndexReducer = function IndexReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case GET_ALL_POST:\n        break;\n\n      case GET_ALL_POST_SUCCESS:\n        draft.posts = action.data;\n        break;\n\n      case GET_ALL_POST_FAIELD:\n        console.log(action.error);\n        break;\n\n      case DEFAULT_ACTION:\n        draft.start = true;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\nexport default IndexReducer;","map":{"version":3,"sources":["/home/mehdi/Projects/jahaninfo/next-boilerplate-ts/pages/reducer.ts"],"names":["produce","DEFAULT_ACTION","GET_ALL_POST","GET_ALL_POST_SUCCESS","GET_ALL_POST_FAIELD","initialState","start","posts","IndexReducer","state","action","draft","type","data","console","log","error"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,SAASC,cAAT,EAAyBC,YAAzB,EAAuCC,oBAAvC,EAA6DC,mBAA7D,QAAwF,aAAxF;AAGA,OAAO,IAAMC,YAAyB,GAAG;AACvCC,EAAAA,KAAK,EAAE,KADgC;AAEvCC,EAAAA,KAAK,EAAE;AAFgC,CAAlC;AASP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA,MAACC,KAAD,uEAASJ,YAAT;AAAA,MAAuBK,MAAvB;AAAA,SAC1BV,OAAO,CAACS,KAAD,EAAQ,UAAAE,KAAK,EAAI;AACtB,YAAQD,MAAM,CAACE,IAAf;AACE,WAAKV,YAAL;AACE;;AACF,WAAKC,oBAAL;AACEQ,QAAAA,KAAK,CAACJ,KAAN,GAAcG,MAAM,CAACG,IAArB;AACA;;AACF,WAAKT,mBAAL;AACEU,QAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACM,KAAnB;AACA;;AACF,WAAKf,cAAL;AACEU,QAAAA,KAAK,CAACL,KAAN,GAAc,IAAd;AACA;;AACF;AACE;AAbJ;AAeD,GAhBM,CADmB;AAAA,CAArB;AAkBP,eAAeE,YAAf","sourcesContent":["import produce from 'immer';\nimport { DEFAULT_ACTION, GET_ALL_POST, GET_ALL_POST_SUCCESS, GET_ALL_POST_FAIELD } from './constants';\n\n\nexport const initialState: IIndexStore = {\n  start: false,\n  posts: [],\n};\nexport interface IIndexStore {\n  start: Boolean,\n  posts: Array<Object>,\n}\n\nexport const IndexReducer = (state = initialState, action: any) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case GET_ALL_POST:\n        break;\n      case GET_ALL_POST_SUCCESS:\n        draft.posts = action.data\n        break;\n      case GET_ALL_POST_FAIELD:\n        console.log(action.error)\n        break;\n      case DEFAULT_ACTION:\n        draft.start = true;\n        break;\n      default:\n        break;\n    }\n  });\nexport default IndexReducer;\n"]},"metadata":{},"sourceType":"module"}