{"ast":null,"code":"import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport createReducer from './reducers';\nimport rootSaga from './saga';\nexport default function configureStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var reduxSagaMonitorOptions = {};\n  var composeEnhancers = compose; // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\n\n  if (process.env.NODE_ENV !== 'production' && true) {\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        serializeToString: true,\n        trace: true,\n        stackTraceLimit: 25\n      });\n    } // Dev Tools once it supports redux-saga version 1.x.x\n    // if (window.__SAGA_MONITOR_EXTENSION__) {\n    //   reduxSagaMonitorOptions = {\n    //     sagaMonitor: window.__SAGA_MONITOR_EXTENSION__,\n    //   };\n    // }\n\n  }\n\n  var sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\n  var middlewares = [sagaMiddleware];\n  var enhancers = [applyMiddleware.apply(void 0, middlewares)];\n  var store = createStore(createReducer, initialState, composeEnhancers.apply(void 0, enhancers));\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}","map":{"version":3,"sources":["/home/mehdi/Projects/jahaninfo/next-boilerplate-ts/configureStore.ts"],"names":["createStore","applyMiddleware","compose","createSagaMiddleware","createReducer","rootSaga","configureStore","initialState","reduxSagaMonitorOptions","composeEnhancers","process","env","NODE_ENV","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","serializeToString","trace","stackTraceLimit","sagaMiddleware","middlewares","enhancers","store","sagaTask","run"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAA8CC,OAA9C,QAA6D,OAA7D;AACA,OAAOC,oBAAP,MAA2C,YAA3C;AACA,OAAOC,aAAP,MAA0B,YAA1B;AACA,OAAOC,QAAP,MAAqB,QAArB;AAaA,eAAe,SAASC,cAAT,GAA2C;AAAA,MAAnBC,YAAmB,uEAAJ,EAAI;AACxD,MAAIC,uBAAuB,GAAG,EAA9B;AACA,MAAIC,gBAAgB,GAAGP,OAAvB,CAFwD,CAIxD;;AACA,MAAIQ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,QAAJ,EAAyE;AACvE,QAAIC,MAAM,CAACC,oCAAX,EAAiD;AAC/CL,MAAAA,gBAAgB,GAAGI,MAAM,CAACC,oCAAP,CAA4C;AAC7DC,QAAAA,iBAAiB,EAAE,IAD0C;AAE7DC,QAAAA,KAAK,EAAE,IAFsD;AAG7DC,QAAAA,eAAe,EAAE;AAH4C,OAA5C,CAAnB;AAKD,KAPsE,CASvE;AACA;AACA;AACA;AACA;AACA;;AACD;;AAED,MAAMC,cAAc,GAAGf,oBAAoB,CAACK,uBAAD,CAA3C;AACA,MAAMW,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,MAAME,SAAS,GAAG,CAACnB,eAAe,MAAf,SAAmBkB,WAAnB,CAAD,CAAlB;AAEA,MAAME,KAAa,GAAGrB,WAAW,CAC/BI,aAD+B,EAE/BG,YAF+B,EAG/BE,gBAAgB,MAAhB,SAAoBW,SAApB,CAH+B,CAAjC;AAMAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBlB,QAAnB,CAAjB;AAEA,SAAOgB,KAAP;AACD","sourcesContent":["import { createStore, applyMiddleware, Store, compose } from 'redux';\nimport createSagaMiddleware, { Task } from 'redux-saga';\nimport createReducer from './reducers';\nimport rootSaga from './saga';\n\ntype TStore = Store & {\n  sagaTask?: Task;\n  runSagaTask?: () => void;\n};\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: any;\n    __SAGA_MONITOR_EXTENSION__: any;\n  }\n}\n\nexport default function configureStore(initialState = {}) {\n  let reduxSagaMonitorOptions = {};\n  let composeEnhancers = compose;\n\n  // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\n  if (process.env.NODE_ENV !== 'production' && typeof window === 'object') {\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        serializeToString: true,\n        trace: true,\n        stackTraceLimit: 25,\n      });\n    }\n\n    // Dev Tools once it supports redux-saga version 1.x.x\n    // if (window.__SAGA_MONITOR_EXTENSION__) {\n    //   reduxSagaMonitorOptions = {\n    //     sagaMonitor: window.__SAGA_MONITOR_EXTENSION__,\n    //   };\n    // }\n  }\n\n  const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\n  const middlewares = [sagaMiddleware];\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  const store: TStore = createStore(\n    createReducer,\n    initialState,\n    composeEnhancers(...enhancers),\n  );\n\n  store.sagaTask = sagaMiddleware.run(rootSaga)\n\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}